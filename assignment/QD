class TreeNode:
    def __init__(self, isbn, book_data):
        self.isbn = isbn
        self.book_data = book_data
        self.left = None
        self.right = None

class BST:
    def __init__(self):
        self.root = None

    def insert(self, isbn, book_data):
        def _insert(node, isbn, book_data):
            if node is None:
                return TreeNode(isbn, book_data)
            elif isbn < node.isbn:
                node.left = _insert(node.left, isbn, book_data)
            else:
                node.right = _insert(node.right, isbn, book_data)
            return node

        self.root = _insert(self.root, isbn, book_data)

    def search(self, isbn):
        def _search(node, isbn):
            if node is None or node.isbn == isbn:
                return node
            if isbn < node.isbn:
                return _search(node.left, isbn)
            return _search(node.right, isbn)

        result = _search(self.root, isbn)
        return result.book_data if result else None

    def delete(self, isbn):
        def _min_value_node(node):
            current = node
            while current.left is not None:
                current = current.left
            return current

        def _delete_node(node, isbn):
            if node is None:
                return node
            if isbn < node.isbn:
                node.left = _delete_node(node.left, isbn)
            elif isbn > node.isbn:
                node.right = _delete_node(node.right, isbn)
            else:
                if node.left is None:
                    return node.right
                elif node.right is None:
                    return node.left
                temp = _min_value_node(node.right)
                node.isbn = temp.isbn
                node.book_data = temp.book_data
                node.right = _delete_node(node.right, temp.isbn)
            return node

        self.root = _delete_node(self.root, isbn)


